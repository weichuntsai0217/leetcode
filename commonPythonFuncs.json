{
  "list.sort": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "sorted": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "chr": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "ord": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "str.splitlines": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "str.lstrip": {
    "note": "
        會 return 新字串, 原本的string不會變
        sa = '     this is string example....wow!!!     ';
        sb = '\t     this is string example....wow!!!     ';
        sc = '888     this is string example....wow!!!     ';
        a = sa.lstrip() --> default 刪掉左邊的空格 (tab也算)
        b = sb.lstrip('\t') --> 指定刪掉左邊的tab
        c = sc.lstrip('8') --> 指定刪掉左邊的'8'
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "str.rstrip": {
    "note": "
        和lstrip一樣, 只是刪的是靠右邊的字串
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "str.lower": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "str.upper": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "str.find": {
    "note": "
        回傳substring在原string的位置(只會回傳第一次出現的位置),
        開始找的位置default為0, 結束的位置也可以指定
        str1 = 'this is string example..exam..wow!!!'
        str2 = 'exam'
        print str1.find(str2)         --> 15, default 從0 開始找
        print str1.find(str2, 10)     --> 15, 從 10 開始找
        print str1.find(str2, 22, 28) --> 24, 從 22 找到27 (28不算)
        print str1.find(str2, 22, 27) --> -1, -1表示沒找到, 從 22 找到26 (27不算)
        print str1.find(str2, 40)     --> -1, -1表示沒找到
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "str.startswith": {
    "note": "
        確認str從某個位置(default為0)開始是否包含某個string
        str = 'this is string example....wow!!!';
        print str.startswith( 'this' )       --> True, 0為start(default)
        print str.startswith( 'is', 2, 4 )   --> True, 2為start, 4為stop
        print str.startswith( 'this', 2, 4 ) --> False
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "str.replace": {
    "note": "
        取代特定子字串, 若沒指定取代個數, default是全部取代
        s = '..is..is..is..'
        print s.replace('is', 'was')    --> '..was..was..was..'
        print s.replace('is', 'was', 2) --> '..was..was..is..'
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "str.join": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "str.split": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "max": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "min": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "abs": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "random.randint": {
    "note": "random.randint(1,3) --> 亂數產生數字r, 1 <= r <= 3",
    "time_complexity": "",
    "space_complexity": "",
  },
  "random.randrange": {
    "note": "
        random.randrange(3) --> 亂數產生數字r, 0 <= r < 3
        random.randrange(1, 4) --> 亂數產生數字r, 1 <= r < 4
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "heqpq": {
    "note": "This module provides an implementation of the heap queue algorithm, also known as the priority queue algorithm."
  },
  "heapq.merge": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "heapq.heapify": {
    "note": "
        把list排序成heap list
        a = [5,2,3,9]
        heapq.heapify(a)
        print a --> [2, 5, 3, 9]
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "heapq.heappush": {
    "note": "
        將heap list (或empty list)插入元素並在插入後維持heap性質
        a = []
        heapq.heappush(a,5)
        heapq.heappush(a,2)
        heapq.heappush(a,3)
        heapq.heappush(a,9)
        print a --> [2, 5, 3, 9]
        heapq.heappush(a,4)
        print a --> [2, 4, 3, 9, 5]
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "heapq.heapreplace": {
    "note": "
        先刪後放, 相當於先做 heappop 再做 heappush
        a = [2]
        heapq.heappush(a,5)  
        heapq.heappush(a,9)
        heapq.heappush(a,4)
        print a --> [2, 4, 9, 5]
        heapq.heapreplace(a,6) --> heappop 最小值2, 然後再heappush 6
        print a --> [4, 5, 9, 6]
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "heapq.heappushpop": {
    "note": "
        先放後刪, 相當於先做 heappush 再做 heappop
        a = [2]
        heapq.heappush(a,5)  
        heapq.heappush(a,9)
        heapq.heappush(a,4)
        print a --> [2, 4, 9, 5]
        heapq.heappushpop(a,6) --> 先heappush 6  再heappop 最小值2
        print a --> [4, 5, 9, 6]
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "heapq.heappop": {
      "note": "
          把heap list中最小的移除且回傳, 原本的heap list仍會維持heap 性質
          a = [5,2,3,9]
          heapq.heapify(a)       --> [2, 5, 3, 9]
          print heapq.heappop(a) --> 2
          print a                --> [3, 5, 9], 仍維持heap 性質
      "
  },
  "itertools": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "zip": {
    "note": "
        將input的iterable object依序配對, 可以看成是轉置矩陣, 配對完後每一列是tuple
        matrix = [
          [1,2,3],
          [11,22,33]
        ]
        transpose = zip(*matrix) --> [
                                       (1, 11),
                                       (2, 22),
                                       (3, 33)
                                     ]
        或
        a = '123'
        b = (10, 20, 30) 
        c = [111, 222, 333]
        d = zip(a, b, c)    --> [
                                  ('1', 10, 111),
                                  ('2', 20, 222),
                                  ('3', 30, 333)
                                ]
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "bisect": {
    "note": "Array bisection algorithm"
  },
  "bisect.bisect": {
    "note": "
        回傳新數值插入list(必須是ascending!)的位置, 但不會插入
        a = [2,4,7,9]
        print bisect.bisect(a, 3) --> 1, 若3要插入a, 會插在index=1
        print bisect.bisect(a, 4) --> 2, 若4要插入a, 會插在index=2 (數值重複則靠右)
        print a                   --> [2,4,7,9], 原list不變
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "bisect.bisect_left": {
    "note": "
        同bisect.bisect, 只是數值重複則靠左
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "bisect.bisect_right": {
    "note": "
        同bisect.bisect, 只是數值重複則靠右
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "bisect.insort": {
    "note": "
        對一個已排序(必須是ascending!)的list插入新的元素, 並保持插入後仍為ascending
        import bisect
        a = [2,4,7,9]
        bisect.insort(a, 3)
        print a --> [2, 3, 4, 7, 9]
    ",
    "time_complexity": "",
    "space_complexity": "",
  },
  "collections.deque": {
    "note": ""
  },
  "collections.Counter": {
    "note": ""
  },
  "iter": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "iter.next": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "next": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "re.findall": { ---
    "time_complexity": "",
    "space_complexity": "",
  },
  "re.sub": { ---
    "time_complexity": "",
    "space_complexity": "",
  },
  "any": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "all": {
    "time_complexity": "",
    "space_complexity": "",
  },
  "\n": "new line",
  "\t": "tab"
}
